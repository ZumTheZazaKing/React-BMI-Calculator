{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Input","props","id","ref","inputContainerClass","onSubmit","handleSubmit","type","onChange","handleChangeWeight","value","dataWeight","required","handleChangeHeight","dataHeight","Output","useEffect","changeResponse","dataBmi","outputContainerClass","className","responseClass","dataResponse","onClick","calculateAgain","App","useState","weightValue","setWeightValue","heightValue","setHeightValue","bmiValue","setBmiValue","response","setResponse","useRef","e","calculatedResult","parseFloat","toFixed","current","preventDefault","target","el","ReactDOM","render","document","getElementById"],"mappings":"0JAYeA,G,KAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,OCDd,SAASQ,EAAMC,GAEb,OAAO,sBAAKC,GAAG,iBAAiBC,IAAKF,EAAMG,oBAApC,UAEL,gDAEA,uBAAMC,SAAUJ,EAAMK,aAAtB,UAEE,iDACA,uBAAOC,KAAK,SAASC,SAAUP,EAAMQ,mBAAoBC,MAAOT,EAAMU,WAAYC,UAAQ,IAE1F,uBAAK,uBAEL,gDACA,uBAAOL,KAAK,SAASC,SAAUP,EAAMY,mBAAoBH,MAAOT,EAAMa,WAAYF,UAAQ,IAE1F,uBAAK,uBAEL,uBAAOL,KAAK,SAASG,MAAM,oBAOjC,SAASK,EAAOd,GAMd,OAJAe,qBAAU,WACRf,EAAMgB,eAAehB,EAAMiB,YAGtB,sBAAKhB,GAAG,kBAAkBC,IAAKF,EAAMkB,qBAAsBC,UAAU,OAArE,UAEL,8CACA,6BAAKnB,EAAMiB,UACX,mBAAGhB,GAAG,WAAWC,IAAKF,EAAMoB,cAA5B,SAA4CpB,EAAMqB,eAClD,wBAAQC,QAAS,WAAOtB,EAAMuB,kBAA9B,gCAQJ,SAASC,IAEP,MAAoCC,mBAAS,IAA7C,mBAAKC,EAAL,KAAkBC,EAAlB,KACA,EAAoCF,mBAAS,IAA7C,mBAAKG,EAAL,KAAkBC,EAAlB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAKK,EAAL,KAAeC,EAAf,KACA,EAA8BN,mBAAS,IAAvC,mBAAKO,EAAL,KAAeC,EAAf,KAEMb,EAAgBc,mBAChB/B,EAAsB+B,mBACtBhB,EAAuBgB,mBAsD7B,OAAO,sBAAKf,UAAU,YAAf,UAEL,cAACpB,EAAD,CACAc,WAAYe,EACZlB,WAAYgB,EACZrB,aAhDF,SAAsB8B,GACpB,IAAIC,GAAoBC,WAAWX,GAAX,SAAwBW,WAAWT,GAAc,IAAGU,QAAQ,GACpFP,EAAYK,GAEZjC,EAAoBoC,QAAQpB,UAAY,OACxCD,EAAqBqB,QAAQpB,UAAY,GAGzCgB,EAAEK,kBAyCFhC,mBAzDF,SAA4B2B,GAC1BR,EAAeQ,EAAEM,OAAOhC,QAyDxBG,mBAtDF,SAA4BuB,GAC1BN,EAAeM,EAAEM,OAAOhC,QAsDxBN,oBAAqBA,IAGrB,cAACW,EAAD,CACAG,QAASa,EACTT,aAAcW,EACdhB,eA7CF,SAAwBP,GACnBA,EAAQ,MACTwB,EAAY,uBACZb,EAAcmB,QAAQpB,UAAY,eAE1BV,EAAQ,MAAQA,EAAQ,MAChCwB,EAAY,kBACZb,EAAcmB,QAAQpB,UAAY,UAE1BV,EAAQ,MAAQA,EAAQ,MAChCwB,EAAY,sBACZb,EAAcmB,QAAQpB,UAAY,eAGlCc,EAAY,iBACZb,EAAcmB,QAAQpB,UAAY,UA+BpCC,cAAeA,EACfF,qBAAsBA,EACtBK,eA3BF,WACEI,EAAe,IACfE,EAAe,IACfE,EAAY,IACZE,EAAY,IACZb,EAAcmB,QAAQpB,UAAY,GAClChB,EAAoBoC,QAAQpB,UAAY,GACxCD,EAAqBqB,QAAQpB,UAAY,aA8B7C,IAAMuB,EAAK,cAAClB,EAAD,IAEXmB,IAASC,OAAOF,EAAIG,SAASC,eAAe,SAO5CxD,K","file":"static/js/main.8504cd05.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport reportWebVitals from './reportWebVitals';\n\nfunction Input(props){\n\n  return <div id=\"inputContainer\" ref={props.inputContainerClass}>\n\n    <h2>BMI Calculator</h2>\n\n    <form onSubmit={props.handleSubmit}>\n\n      <label>Weight(kg): </label>\n      <input type=\"number\" onChange={props.handleChangeWeight} value={props.dataWeight} required/>\n\n      <br/><br/>\n\n      <label>Height(m): </label>\n      <input type=\"number\" onChange={props.handleChangeHeight} value={props.dataHeight} required/>\n\n      <br/><br/>\n\n      <input type=\"submit\" value=\"Calculate\" />\n    </form>\n\n  </div>\n\n}\n\nfunction Output(props){\n\n  useEffect(() => {\n    props.changeResponse(props.dataBmi);\n  })\n\n  return <div id=\"outputContainer\" ref={props.outputContainerClass} className=\"hide\">\n\n    <h3>Your BMI is:</h3>\n    <h2>{props.dataBmi}</h2>\n    <p id=\"response\" ref={props.responseClass}>{props.dataResponse}</p>\n    <button onClick={() => {props.calculateAgain()}}>Calculate Again</button>\n\n  </div>\n\n}\n\n\n\nfunction App(){\n\n  let [weightValue, setWeightValue] = useState(\"\");\n  let [heightValue, setHeightValue] = useState(\"\");\n  let [bmiValue, setBmiValue] = useState(\"\");\n  let [response, setResponse] = useState(\"\");\n\n  const responseClass = useRef();\n  const inputContainerClass = useRef();\n  const outputContainerClass = useRef();\n\n\n  function handleChangeWeight(e){\n    setWeightValue(e.target.value)\n  }\n\n  function handleChangeHeight(e){\n    setHeightValue(e.target.value)\n  }\n\n  function handleSubmit(e){\n    let calculatedResult = (parseFloat(weightValue)/parseFloat(heightValue)**2).toFixed(2);\n    setBmiValue(calculatedResult);\n\n    inputContainerClass.current.className = \"hide\";\n    outputContainerClass.current.className = \"\";\n\n\n    e.preventDefault();\n  }\n\n\n  function changeResponse(value){\n    if(value < 18.5){\n      setResponse(\"You're Underweight!\");\n      responseClass.current.className = \"underweight\";\n\n    } else if(value > 18.5 && value < 24.9){\n      setResponse(\"You're Normal!\");\n      responseClass.current.className = \"normal\";\n\n    } else if(value > 24.9 && value < 29.9){\n      setResponse(\"You're Overweight!\");\n      responseClass.current.className = \"overweight\";\n\n    } else {\n      setResponse(\"You're Obese!\");\n      responseClass.current.className = \"obese\";\n\n    }\n  }\n\n\n  function calculateAgain(){\n    setWeightValue(\"\");\n    setHeightValue(\"\");\n    setBmiValue(\"\");\n    setResponse(\"\");\n    responseClass.current.className = \"\";\n    inputContainerClass.current.className = \"\";\n    outputContainerClass.current.className = \"hide\";\n  }\n\n  return <div className=\"container\">\n\n    <Input \n    dataHeight={heightValue} \n    dataWeight={weightValue} \n    handleSubmit={handleSubmit}\n    handleChangeWeight={handleChangeWeight}\n    handleChangeHeight={handleChangeHeight}\n    inputContainerClass={inputContainerClass}\n    />\n\n    <Output \n    dataBmi={bmiValue} \n    dataResponse={response} \n    changeResponse={changeResponse}\n    responseClass={responseClass}\n    outputContainerClass={outputContainerClass}\n    calculateAgain={calculateAgain}\n    />\n\n\n  </div>\n\n}\n\n\n\nconst el = <App/>\n\nReactDOM.render(el, document.getElementById('root'));\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}